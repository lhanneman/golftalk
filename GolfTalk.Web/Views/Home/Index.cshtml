@model GolfTalk.Models.ViewModels.MainViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    @if (!string.IsNullOrEmpty(Model.TeamName))
    {
        <div class="team-container">
            <div class="team">
                @Model.TeamName
            </div>
        </div>
    }
    <div class="col-md-6 col-md-offset-3 col-sm-12 col-xs-12">
        <ul class="nav nav-tabs">
            <li class="active"><a data-toggle="tab" href="#scores">Standings</a></li>
            <li><a data-toggle="tab" href="#add-score">Add Score</a></li>
            <li><a data-toggle="tab" href="#comments">Comments</a></li>
        </ul>
        <div class="tab-content">
            <div id="scores" class="tab-pane fade in active">
                <table id="team-scores" class="table table-striped">
                    <thead>
                        <tr>
                            <th colspan="2"></th>
                            <th>THRU</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var team in Model.TeamScores)
                        {
                            <tr id="@team.TeamID" class="team-name-row">
                                <th>@team.Name</th>
                                <td rel="score">@(team.Score > 0 ? "+" + team.Score : team.Score.ToString())</td>
                                <td rel="thru">@team.Thru</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div id="add-score" class="tab-pane fade in">
                @if (Request.IsAuthenticated)
                {
                    @Html.Partial("_AddScorePartial")
                }
                else
                {
                    <div>please register or login to add a score</div>
                }
            </div>
            <div id="comments" class="tab-pane fade in">
                @if (Request.IsAuthenticated)
                {
                    <div id="feed-field" class="input-group">
                        <input type="text" id="feed-message" placeholder="Enter trash talk message here" class="form-control" />
                        <span class="input-group-btn">
                            <button class="btn btn-default" type="button" id="feed-button">Send</button>
                        </span>
                    </div>
                }
                <div id="feed">
                    @foreach (var chat in Model.ChatEntries)
                    {
                        <div class="feed-item">
                            @Html.Raw(chat.Message)
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {

            $(".change-number").off("click").on("click", function () {
                var self = $(this);
                var add = self.hasClass("add");
                var input = self.parents("tr:first").find("input:first");
                var currentValue = !isNaN(input.val()) ? +input.val() : 0;
                var min = +input.attr("min");
                var max = +input.attr("max");

                if (add) {
                    currentValue += 1;
                } else {
                    currentValue -= 1;
                }

                if (currentValue > max || currentValue < min) {
                    return;
                }

                input.val(currentValue);
            });

            $(".submit-score").off("click").on("click", function () {

                $(".nav-tabs a[href='#scores']").tab("show");

                var holeNum = $("#holeNumber").val();
                var strokes = $("#strokes").val();

                $.ajax({
                    type: "POST",
                    url: "@Url.Content("~/scores/add")",
                    data: JSON.stringify({ Strokes: strokes, HoleNumber: holeNum }),
                    contentType: "application/json",
                    success: function (json) {
                        if (json !== null && json !== undefined && json !== "") {
                            var nextHole = JSON.parse(json);
                            $("#holeNumber").val(nextHole.HoleNumber);
                            $("#strokes").val(nextHole.Strokes);
                        }
                    },
                    error: function (a, b, c) {
                        alert("error adding score: " + a.responseText);
                    }
                });
            });

            $("#feed-button").off("click").on("click", function () {
                $.ajax({
                    type: 'POST',
                    url: "@Url.Action("SendTrashTalkMessage", "Home")",
                    data: { message: $("#feed-message").val() },
                    success: ParseMessage,
                    error: ShowError
                });
            });

            $("#feed-message").keydown(function (e) {
                var keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    // enter:
                    $("#feed-button").click();
                }
                return true;
            });

            $("tr.team-name-row").on("click", function () {
                var thisTeamId = $(this).attr("id");
                window.location.href = "/scoreboard/" + thisTeamId;
            });

            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                var target = $(e.target).attr("href");
                if (target === "#comments") {
                    clearCommentBadgeCount();
                }
            });

            var hub = $.connection.ChatHub;

            hub.client.updateFeed = function (message) {
                var html = "<div class='feed-item new-item'>" + message + "</div>";
                var firstItem = $("#feed").find(".feed-item").first();
                if (firstItem.length) {
                    firstItem.before(html).hide().fadeIn();
                } else {
                    $("#feed").html(html).hide().fadeIn();
                }

                var userIsOnCommentsTab = $("ul.nav-tabs>li.active").text() === "Comments";
                if (!userIsOnCommentsTab) {
                    incrementCommentBadgeCount();
                } else {
                    clearCommentBadgeCount();
                }

                setTimeout(function () { $(".new-item:last").removeClass("new-item"); }, 5000);
            }

            hub.client.updateScore = function (teamId, score, thru) {
                var teamRow = $("#team-scores").find("tr#" + teamId);
                if (teamRow.length) {
                    
                    // update the values:
                    if (!isNaN(score) && score > 0) {
                        score = "+" + score;
                    }

                    teamRow.find("td[rel='score']").html(score);
                    teamRow.find("td[rel='thru']").html(thru);
                    teamRow.addClass("new-item");

                    setTimeout(function () { teamRow.removeClass("new-item"); }, 5000);
                }
            }

            $.connection.hub.start();
        });

        function ParseMessage(message) {
            $("#feed-message").val("");
        }

        function ShowError(a, b, c) {
            alert(a.responseText);
        }

        function incrementCommentBadgeCount() {
            var commentLink = $("a[href='#comments'");
            //var li = commentLink.parent();
            var badge = commentLink.find(".badge");

            if (badge.length === 0) {
                commentLink.html("Comments<span class='badge'>1</span>");
            } else {
                var currentCounter = +badge.text();
                currentCounter += 1;
                badge.html(currentCounter);
            }
        }

        function clearCommentBadgeCount() {
            var commentLink = $("a[href='#comments'");
            commentLink.find(".badge").remove();
        }

    </script>

}